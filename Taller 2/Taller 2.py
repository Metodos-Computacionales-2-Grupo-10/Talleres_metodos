import numpy as np
import matplotlib.pyplot as plt
import scipy as sci
"""1. Intuici√≥n e interpretaci√≥n (Transformada general)
La siguiente es una funci√≥n que puede utilizar en este punto para generar sus datos para este
punto:
def generate_data(tmax,dt,A,freq,noise):
    '''Generates a sin wave of the given amplitude (A) and frequency (freq),
    sampled at times going from t=0 to t=tmax, taking data each dt units of time.
    A random number with the given standard deviation (noise) is added to each data point.
    ----------------
    Returns an array with the times and the measurements of the signal. '''
    ts = np.arange(0,tmax+dt,dt)
    return ts, np.random.normal(loc=A*np.sin(2*np.pi*ts*freq),scale=noise)
Para todo este punto se necesitar√° la funci√≥n que se pide escribir en la Secci√≥n 1.a"""


"""1.a Limite de Nyquist """
"""1.a.a. Implementaci√≥n
Escriba una funci√≥n que, dados unos arrays de tiempo (ùë°), de medici√≥n de la se√±al (ùë¶), y de
frecuencias (ùëì), calcule la transformada en dichas frecuencias.
La definici√≥n puede ser:
ùêπùëò=‚àë
ùëÅ
ùëñ=1
ùë¶ùëñùëí‚àí2ùúãùïöùëìùëòùë°ùëñ
donde ùëÅ es la longitud de los datos. NOTA: el array de frecuencias no necesariamente es del
mismo tama√±o que los datos.
La funci√≥n debe llamarse  Fourier_transform ."""



"""1.a.b. Prueba
Genere una se√±al con la funci√≥n proporcionada arriba, y grafique su espectro calculado hasta
2.7 veces la frecuencua de Nyquist. Guarde como  1.a.pdf"""



"""1.b. Signal-to-noise
La raz√≥n se√±al-a-ruido (SN) se define como la amplitud del fen√≥meno que nos importa (signal)
sobre una medida del ruido del fondo (noise), como lo puede ser la desviaci√≥n est√°ndar.
Con la funci√≥n de arriba podemos generar una se√±al con el SNtime que queramos, porque ser√≠a
igual a  A/freq .
En el dominio de frecuencias, se mide el SNfreq como la altura del pico principal de la se√±al
dividida sobre la desviaci√≥n est√°ndar de la parte del espectro que no tiene picos.
Genere muchos conjuntos de datos, cada uno SNtime diferente (puede ser logar√≠tmicamente
distribu√≠dos  de  0.01  a  1.0)  y  calcule  las  SN  de  cada  uno  de  esos  datos  pero  en  espacio  de
frecuencias. Grafique SNfreq vs SNtime.
Encuentre alg√∫n modelo para lo que observa. Posiblemente se vea mejor en log-log.
Para pensar: ¬øqu√© variables har√≠an cambiar este comportamiento? ( A ,  tmax ,  freq ,  dt , ...)"""



"""1.c. Principio de indeterminaci√≥n de las ondas
Usando  la  funci√≥n  para  generar  datos,  muestre  c√≥mo  cambia  el  ancho  de  los  picos  de  la
transformada en funci√≥n de  tmax .
Para pensar: ¬øesto cambia si muevo alguna de las otras variables?"""



"""1.d. (BONO) M√°s all√° de Nyquist
Modificque  la  funci√≥n  generate_data   para  que  acepte  un  argumento  opcional  llamado
sampling_noise  que meta ruido a los tiempos de muestreo de la se√±al  ts  antes de que se
mida la se√±al, y retorne la se√±al medida en esos nuevos tiempos ‚Äúperturbados‚Äù.
Grafique  la  transformada  hasta  2.7  veces  la  frecuencia  de  Nyquist,  para  varios
sampling_noise .
Dependiendo de qu√© tan grande sea ese ruido de muestreo, los picos repetidos de la transfor-
mada deber√≠an irse eliminando, quedando la frecuencia real, incluso si √©sta es mayor que la
de Nyquist.
En bloque ne√≥n hay una muestra de c√≥mo podr√≠a quedar esta gr√°fica."""

"""2. Ciclos de actividad solar (FFT 1D)
Adjuntos encontrar√° unos datos  SN_d_tot_V2.0.csv  que corresponden al registro hist√≥rico
m√°s  extenso  de  manchas  solares  que  pude  conseguir.  Tanto  los  datos  como  su  descripci√≥n
est√°n  disponibles  p√∫blicamente  desde  el  Observatorio  Real  de  B√©lgica,  pero  con  el  archivo
adjunto basta."""

"""2.a. Arreglar
Importe los datos. Notar√° que antes de 1850 hay algunos d√≠as que tienen ‚àí1 manchas. Esto
claramente quiere decir que no se tomaron datos (NO quiere decir que no hayan manchas).
Use alg√∫n m√©todo que no sea de Fourier para reemplazar estos valores faltantes.
Para pensar: ¬øpor qu√© no puede simplemente quitarlos?"""



"""2.b. Filtrado y an√°lisis
‚Ä¢ Obtenga el per√≠odo del ciclo solar en d√≠as.
‚Ä£ BONO: use el truco descrito en clase para encontrar el per√≠odo con a√∫n m√°s precisi√≥n.
‚Ä£ En cualquier caso, guarde este n√∫mero como texto en un archivo llamado  2.b.txt
‚Ä¢ Dise√±e un filtro pasa bajas para capturar el comportamiento general de los datos, sin tanto
ruido.
‚Ä£ Puede ponerse creativo con la funci√≥n de filtro.
‚Ä£ Grafique los datos antes y despu√©s de filtrar en  2.b.data.pdf .
‚Ä¢ Halle los m√°ximos locales de la se√±al filtrada, que deber√≠a ser una curva suave.
‚Ä£ Grafique el n√∫mero de manchas solares en el m√°ximo contra la fecha en la que ocurre el
m√°ximo en  2.b.maxima.pdf .
‚Ä£ Se baja si se considera el a√±o como variable categ√≥rica.
Para pensar: ¬øqu√© tanto se puede filtrar la se√±al?
"""



"""3. Filtrando im√°genes (FFT 2D)"""
"""3.a. Desenfoque
Adjunta encontrar√° una foto del gato Miette. Multiplique la transformada 2D con una imagen
del mismo tama√±o de una gaussiana para obtener una versi√≥n desenfocada de la imagen. Debe
hacer esto para cada canal de color de la imagen.
Se recomienda abrir la imagen con  np.array(PIL.Image.open(...)) . Se recomienda tratar
la transformada de la imagen con  fftshift .
Guarde la imagen borrosa como  3.a.jpg ."""



"""3.b. Ruido peri√≥dico"""
"""3.b.a. P_a_t_o
Adjunta tambi√©n encontrar√° la imagen de un pato, en blanco y negro esta vez. Esta imagen
presenta ruido peri√≥dico, que puede evidenciar por los picos en la transformada bidimensional.
Elimine estos picos manualmente, poniendo ceros en el array donde est√°n los picos. Realice
la  transformada  inversa  para  obtener  la  imagen  sin  ruido  peri√≥dico.  Guarde  la  imagen  en
3.b.a.jpg
Para pensar: en vez de ceros, ¬øse le ocurre alguna manera mejor de quitar estos picos?
"""



"""3.b.b. G_a_t_o
Haga  lo  mismo  con  la  imagen  del  gato  que  parece  que  estuviera  detr√°s  de  unas  persianas
medio abiertas. Guarde en  3.b.b.png
Para pensar: ¬øse le ocurre alguna manera de detectar estos picos autom√°ticamente?
"""


"""4. Aplicaci√≥n real: datos con muestreo aleatorio
El archivo de datos  OGLE-LMC-CEP-0001.dat  contiene tres columnas: tiempo, brillo, e incer-
tidumbre en el brillo de una estrella. El tiempo est√° dado en el n√∫mero fraccionario de d√≠as
desde el 9 de Octubre de 1995, por alguna raz√≥n.
Los datos fueron tomados en Las Campanas, Chile, y tienen un muestreo de m√°s o menos cada
noche. A veces se toman varios datos la misma noche, a veces hay varias noches sin datos, y
se toman a horas ligeramente distintas.
Para pensar: ¬øpodr√≠amos decir que la frecuencia de muestreo es de 1 por d√≠a?
Encuentre la frecuencia de la se√±al.
Para  comprobar  que  sea  esta  realmente  la  frecuencia  de  la  se√±al,  calcule  la  fase
œÜ = np.mod(f*t,1) , donde ùëì es la frecuencia de la se√±al y ùë° es la columna de tiempo.
Grafique el brillo de la estrella en funci√≥n de ùúô, guarde en  4.pdf ."""




"""5. Aplicaci√≥n real: Reconstrucci√≥n tomogr√°fica filtrada
En bloque ne√≥n hay un video que muestra en resumen c√≥mo funciona una tomograf√≠a. Mire
el video antes de continuar.
‚Ä¢ Para cada √°ngulo, se toma una imagen 1D de los rayos X atravesando la parte del cuerpo
que se quiere observar.
‚Ä£ El resultado es la una suma de intensidades para ese √°ngulo, una se√±al 1D.
‚Ä¢ Se hace esto para muchos √°ngulos y se guardan las proyecciones.
‚Ä¢ Luego, cada imagen 1D se convierte en una imagen 2D repitiendo los datos hacia abajo.
‚Ä£ La imagen resultante se rota, como se muestra en la figura
‚Ä¢ Se suman todas estas im√°genes, y as√≠ se logra una reconstrucci√≥n aproximada de la imagen
original.
Pero  esta  imagen  es  muy  borrosa,  no  se  distinguen  los  detalles.  Para  mejorar  los  detalles,
dise√±e un filtro pasa altas y apl√≠quelo a cada una de las proyecciones (se√±ales 1D) antes de la
suma. Esto producir√° algunos artefactos en la imagen, pero mejorar√° el contraste:
Pista: si tiene la se√±al 1D en el array  signal , para formar la imagen ya rotada puede servirse
del siguiente c√≥digo:
from scipy import ndimage as ndi
imagen_rotada = ndi.rotate(
    np.tile(signal[:,None],rows).T,
    rotation_angle,
    reshape=False,
    mode="reflect"
)
Donde  rotation_angle   es  el  √°ngulo  de  rotaci√≥n  en  grados,  rows   es  el  n√∫mero  de  filas
(pixeles en y) de la imagen resultante, y los dem√°s argumentos se encargan de conservar el
brillo.
Encontrar√° una carpeta con muchos conjuntos de datos de proyecciones de una tomograf√≠a
craneal. Use el n√∫mero de su grupo. Si por alg√∫n motivo alg√∫n miembro de su grupo tienen
sensibilidad a las im√°genes anat√≥micas, use a  skelly.npy
Guarde la imagen filtrada resultante en  4.png .
"""
import numpy as np
import matplotlib.pyplot as plt
from scipy import ndimage as ndi

# Filtro pasa altas
def filtro_pasa_altas(signal):
    N = len(signal)
    freqs = np.fft.fftfreq(N)
    H = np.abs(freqs)   # Ram-Lak
    F = np.fft.fft(signal)
    return np.real(np.fft.ifft(F * H))

def reconstruccion(file="11.npy", rows=356):
    # Cargar TODAS las proyecciones: matriz (n_angulos, n_pixeles)
    proyecciones = np.load(file)  
    n_angulos, n_pixeles = proyecciones.shape

    suma = np.zeros((rows, rows))

    for i in range(n_angulos):
        signal = proyecciones[i, :]   # proyecci√≥n individual
        signal_f = filtro_pasa_altas(signal)

        # Expandir a 2D
        proy = np.tile(signal_f[:, None], rows).T  

        # √Ångulo de esta proyecci√≥n
        angulo = i * 180 / n_angulos

        # Rotar e ir sumando
        proy_rotada = ndi.rotate(proy, angulo, reshape=False, mode="reflect")
        suma += proy_rotada

    return suma
imagen = reconstruccion("11.npy", rows=356)
plt.savefig("4.png", bbox_inches="tight")


